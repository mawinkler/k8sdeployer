image: docker:stable

stages:
  - stage
  - scan

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

services:
  - name: docker:dind
    command:
      - /bin/sh
      - -c
      - wget http://192.168.1.122:8080/marwinsworld.online.crt -O /usr/local/share/ca-certificates/marwinsworld.online.crt && update-ca-certificates && dockerd-entrypoint.sh || exit

before_script:
  - apk add --no-cache curl jq python py-pip
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

dockerbuild:
  stage: stage
  script:
    # Template for caching
#    - docker pull $CONTAINER_IMAGE:latest || true
#    - docker build --cache-from $CONTAINER_IMAGE:latest --tag $CONTAINER_IMAGE:$CI_COMMIT_SHA --tag $CONTAINER_IMAGE:latest .
#    - docker push $CONTAINER_IMAGE:$CI_COMMIT_SHA
#    - docker push $CONTAINER_IMAGE:latest

    # Cached version
    - docker pull ${CI_REGISTRY_IMAGE}:latest || true
    - docker build --cache-from ${CI_REGISTRY_IMAGE}:latest --tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG} --tag ${CI_REGISTRY_IMAGE}:latest .
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
    - docker push ${CI_REGISTRY_IMAGE}:latest

    # Working but slow
#    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG} .
#    - docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG} ${CI_REGISTRY_IMAGE}:latest
#    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
#    - docker push ${CI_REGISTRY_IMAGE}:latest
  only:
    - tags
  tags:
    - docker


triggerscan:
  variables:
#    CI_DEBUG_TRACE: "true"
    POLL_INTERVAL: 2
    POLL_RETRIES: 150
  stage: scan
  script:
    - echo "Adding image to Smart Check engine at ${DSSC_SERVICE}"
    # Get bearer token from Smart Check
    - TOKEN=$(curl -sk -X POST $DSSC_SERVICE/api/sessions -H 'content-type:application/json' -H 'x-argus-api-version:2017-10-16' -d '{"user":{"userid":"'$DSSC_USERNAME'","password":"'$DSSC_PASSWORD'"}}' | jq '.token' | tr -d '"')
    # Create scan
    - SCAN_ID=$(curl -sk -X POST $DSSC_SERVICE/api/scans -H 'authorization:Bearer '$TOKEN -H 'cache-control:no-cache' -H 'content-type:application/json' -H 'x-argus-api-version:2017-11-15' -d '{"name":"test","source":{"type":"docker","registry":"'$CI_REGISTRY'","repository":"'$CI_PROJECT_PATH'","tag":"latest","credentials":{"username":"'$CI_REGISTRY_USER'","password":"'$CI_REGISTRY_TOKEN'"},"insecureSkipVerify":true}}}' | jq -r '.id')
    # Wait for scan completed
    - echo "Waiting for analysis to complete"
    - STATUS=""
    - RETRIES="1"
    - while [ "$STATUS" != "completed-with-findings" -a "$STATUS" != "completed-no-findings" -a "$STATUS" != "failed" -a "$RETRIES" -le "$POLL_RETRIES" ] ; do sleep $POLL_INTERVAL ; echo -n "." ; RETRIES=$(($RETRIES+1)) ; STATUS=$(curl -sk -H 'authorization:Bearer '$TOKEN'' -H 'content-Type:application/vnd.com.trendmicro.argus.webhook.v1+json' $DSSC_SERVICE/api/scans/$SCAN_ID | jq -r '.status') ; done
    # Analyse scan results
    - echo "Get scan results"
    - REPORT=$(curl -sk -H 'authorization:Bearer '$TOKEN'' -H 'content-Type:application/vnd.com.trendmicro.argus.webhook.v1+json' $DSSC_SERVICE/api/scans/$SCAN_ID | jq '{unresolved:.findings.vulnerabilities.unresolved, malware:.findings.malware}')
    - CRITICALITY=0
    - CRITICALITY_DEFCON1=$(echo $REPORT | jq -r '.unresolved.defcon1')
    - CRITICALITY_CRITICAL=$(echo $REPORT | jq -r '.unresolved.critical')
    - CRITICALITY_HIGH=$(echo $REPORT | jq -r '.unresolved.high')
    - CRITICALITY_MEDIUM=$(echo $REPORT | jq -r '.unresolved.medium')
    - CRITICALITY_LOW=$(echo $REPORT | jq -r '.unresolved.low')
    - CRITICALITY_MALWARE=$(echo $REPORT | jq -r '.malware')
    - if [ "$CRITICALITY_DEFCON1" != "null" ] ; then CRITICALITY=$(($CRITICALITY+$CRITICALITY_DEFCON1)) ; fi
    - if [ "$CRITICALITY_CRITICAL" != "null" ] ; then CRITICALITY=$(($CRITICALITY+$CRITICALITY_CRITICAL)) ; fi
    - if [ "$CRITICALITY_HIGH" != "null" ] ; then CRITICALITY=$(($CRITICALITY+$CRITICALITY_HIGH)) ; fi
    - if [ "$CRITICALITY_MEDIUM" != "null" ] ; then CRITICALITY=$(($CRITICALITY+$CRITICALITY_MEDIUM)) ; fi
    - if [ "$CRITICALITY_LOW" != "null" ] ; then CRITICALITY=$(($CRITICALITY+$CRITICALITY_LOW)) ; fi
    - if [ "$CRITICALITY_MALWARE" != "null" ] ; then CRITICALITY=$(($CRITICALITY+$CRITICALITY_MALWARE)) ; fi
    - echo $REPORT
    - echo $CRITICALITY
    - echo $CRITICALITY > criticality
    - echo $REPORT > gl-container-scanning-report.json
    # Stop pipeline when CRITICALITY > 0
  artifacts:
    paths:
      - gl-container-scanning-report.json
      - criticality
  only:
    - tags
